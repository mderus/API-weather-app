{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","reportWebVitals.js","index.js"],"names":["Form","props","type","value","placeholder","onChange","change","Result","weather","date","city","sunrise","sunset","temp","pressure","wind","err","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","tempCelsius","Math","floor","className","App","state","handleInputChange","e","setState","target","prevProps","prevState","this","length","API","fetch","then","response","ok","Error","json","data","time","toLocaleString","sys","main","speed","catch","console","log","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAeeA,EAbF,SAACC,GACZ,OACE,+BACE,uBACEC,KAAK,OACLC,MAAOF,EAAME,MACbC,YAAY,4BACZC,SAAUJ,EAAMK,YCwBTC,G,MA9BA,SAACN,GAAW,IAAD,EAEtBA,EAAMO,QADDC,EADiB,EACjBA,KAAMC,EADW,EACXA,KAAMC,EADK,EACLA,QAASC,EADJ,EACIA,OAAQC,EADZ,EACYA,KAAMC,EADlB,EACkBA,SAAUC,EAD5B,EAC4BA,KAAMC,EADlC,EACkCA,IAGtDC,EAAU,KAEd,IAAKD,GAAON,EAAM,CAChB,IAAMQ,EAAc,IAAIC,KAAe,IAAVR,GAAgBS,qBACvCC,EAAa,IAAIF,KAAc,IAATP,GAAeQ,qBACrCE,EAAcC,KAAKC,MAAMX,EAAO,QACtCI,EACE,qCACE,0DAC0B,iCAASP,OAEnC,2DAA8BD,KAC9B,wDAA2Ba,EAA3B,YACA,uEAA6BJ,KAC7B,uEAA6BG,KAC7B,4DAA0BN,EAA1B,UACA,0DAAwBD,EAAxB,aAKN,OACE,qBAAKW,UAAU,SAAf,SAAyBT,EAAG,2BAAuBN,GAASO,MCiFjDS,E,4MArGbC,MAAQ,CACNxB,MAAO,GACPM,KAAM,GACNC,KAAM,GACNC,QAAS,GACTC,OAAQ,GACRC,KAAM,GACNC,SAAU,GACVC,KAAM,GACNC,KAAK,G,EAGPY,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CACZ3B,MAAO0B,EAAEE,OAAO5B,S,wDAsCpB,SAAmB6B,EAAWC,GAAY,IAAD,OAIvC,GAAgC,IAA5BC,KAAKP,MAAMxB,MAAMgC,QACjBF,EAAU9B,QAAU+B,KAAKP,MAAMxB,MAAO,CACxC,IAAMiC,EAAG,4DAAwDF,KAAKP,MAAMxB,MAAnE,kBA7DA,oCA+DTkC,MAAMD,GACHE,MAAK,SAACC,GACL,GAAIA,EAASC,GACX,OAAOD,EAET,MAAME,MAAM,8BAEbH,MAAK,SAACC,GAAD,OAAcA,EAASG,UAC5BJ,MAAK,SAACK,GACL,IAAMC,GAAO,IAAIzB,MAAO0B,iBACxB,EAAKf,UAAS,SAACG,GAAD,MAAgB,CAC5BjB,KAAK,EACLP,KAAMmC,EACNjC,QAASgC,EAAKG,IAAInC,QAClBC,OAAQ+B,EAAKG,IAAIlC,OACjBC,KAAM8B,EAAKI,KAAKlC,KAChBC,SAAU6B,EAAKI,KAAKjC,SACpBC,KAAM4B,EAAK5B,KAAKiC,MAChBtC,KAAMuB,EAAU9B,aAGnB8C,OAAM,SAACjC,GACNkC,QAAQC,IAAInC,GACZ,EAAKc,UAAS,SAACG,GAAD,MAAgB,CAC5BjB,KAAK,EACLN,KAAMuB,EAAU9B,gB,oBAM1B,WACE,OACE,sBAAKsB,UAAU,MAAf,UACE,cAAC,EAAD,CAAMtB,MAAO+B,KAAKP,MAAMxB,MAAOG,OAAQ4B,KAAKN,oBAC5C,cAAC,EAAD,CAAQpB,QAAS0B,KAAKP,e,GAhGZyB,aCIHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAgD,IAA9CkB,EAA6C,EAA7CA,OAAQC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,QAC1DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.27bf45b1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Form = (props) => {\r\n  return (\r\n    <form>\r\n      <input\r\n        type=\"text\"\r\n        value={props.value}\r\n        placeholder=\"Wpisz miasto np. Warszawa\"\r\n        onChange={props.change}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./Result.css\";\r\n\r\nconst Result = (props) => {\r\n  const {date, city, sunrise, sunset, temp, pressure, wind, err} =\r\n    props.weather;\r\n\r\n  let content = null;\r\n\r\n  if (!err && city) {\r\n    const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n    const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n    const tempCelsius = Math.floor(temp - 273.15);\r\n    content = (\r\n      <>\r\n        <h3>\r\n          Wyniki wyszukiwania dla <strong>{city}</strong>\r\n        </h3>\r\n        <h4>Dane dla dnia i godziny: {date}</h4>\r\n        <h4>Aktualna temperatura: {tempCelsius} &#176;C</h4>\r\n        <h4>Wschód słońca dzisiaj o {sunriseTime}</h4>\r\n        <h4>Zachód słońca dzisiaj o {sunsetTime}</h4>\r\n        <h4>Aktualna siła wiatru {wind} m/s</h4>\r\n        <h4>Aktualne ciśnienie {pressure} hPa</h4>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"result\">{err ? `Nie mamy w bazie ${city}` : content}</div>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React, {Component} from \"react\";\nimport \"./App.css\";\nimport Form from \"./Form\";\nimport Result from \"./Result\";\n\n//Klucz do API\nconst APIKey = \"9b8779499483f4a617bd43e164a1a41f\";\n\nclass App extends Component {\n  state = {\n    value: \"\",\n    date: \"\",\n    city: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    temp: \"\",\n    pressure: \"\",\n    wind: \"\",\n    err: false,\n  };\n\n  handleInputChange = (e) => {\n    this.setState({\n      value: e.target.value,\n    });\n  };\n\n  // handleCitySubmit = (e) => {\n  //   e.preventDefault();\n  //   const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${APIKey}`;\n\n  //   fetch(API)\n  //     .then((response) => {\n  //       if (response.ok) {\n  //         return response;\n  //       }\n  //       throw Error(\"Nie udało się\");\n  //     })\n  //     .then((response) => response.json())\n  //     .then((data) => {\n  //       const time = new Date().toLocaleString();\n  //       this.setState((prevState) => ({\n  //         err: false,\n  //         date: time,\n  //         sunrise: data.sys.sunrise,\n  //         sunset: data.sys.sunset,\n  //         temp: data.main.temp,\n  //         pressure: data.main.pressure,\n  //         wind: data.wind.speed,\n  //         city: prevState.value,\n  //       }));\n  //     })\n  //     .catch((err) => {\n  //       console.log(err);\n  //       this.setState((prevState) => ({\n  //         err: true,\n  //         city: prevState.value,\n  //       }));\n  //     });\n  // };\n\n  componentDidUpdate(prevProps, prevState) {\n    // console.log(\"poprzednia wartość \" + prevState.value);\n    // console.log(\"aktualna wartość \" + this.state.value);\n\n    if (this.state.value.length === 0) return;\n    if (prevState.value !== this.state.value) {\n      const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${APIKey}`;\n\n      fetch(API)\n        .then((response) => {\n          if (response.ok) {\n            return response;\n          }\n          throw Error(\"Nie udało się\");\n        })\n        .then((response) => response.json())\n        .then((data) => {\n          const time = new Date().toLocaleString();\n          this.setState((prevState) => ({\n            err: false,\n            date: time,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            temp: data.main.temp,\n            pressure: data.main.pressure,\n            wind: data.wind.speed,\n            city: prevState.value,\n          }));\n        })\n        .catch((err) => {\n          console.log(err);\n          this.setState((prevState) => ({\n            err: true,\n            city: prevState.value,\n          }));\n        });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form value={this.state.value} change={this.handleInputChange} />\n        <Result weather={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}